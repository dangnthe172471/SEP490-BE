using FluentAssertions;
using Microsoft.EntityFrameworkCore;
using SEP490_BE.DAL.Models;
using SEP490_BE.DAL.Repositories;

namespace SEP490_BE.Tests.Repositories
{
    public class RoomRepositoryTests
    {
        // T·∫°o DbContext InMemory m·ªõi cho m·ªói test (ƒë·ªôc l·∫≠p v·ªõi DB th·∫≠t)
        private DiamondHealthContext NewCtx(string db)
        {
            var opt = new DbContextOptionsBuilder<DiamondHealthContext>()
                .UseInMemoryDatabase(db)
                .EnableSensitiveDataLogging()
                .Options;
            return new DiamondHealthContext(opt);
        }

        // SEED d·ªØ li·ªáu ph√≤ng kh√°m m·∫´u
        private async Task SeedRoomDataAsync(DiamondHealthContext ctx)
        {
            ctx.Rooms.AddRange(
                new Room { RoomId = 1, RoomName = "Ph√≤ng kh√°m t·ªïng qu√°t 101" },
                new Room { RoomId = 2, RoomName = "Ph√≤ng tim m·∫°ch 202" },
                new Room { RoomId = 3, RoomName = "Ph√≤ng kh√°m t·ªïng qu√°t 102" },
                new Room { RoomId = 4, RoomName = "Ph√≤ng tim m·∫°ch 203" },
                new Room { RoomId = 5, RoomName = "Ph√≤ng da li·ªÖu 301" },
                new Room { RoomId = 6, RoomName = "Ph√≤ng n·ªôi soi 401" },
                new Room { RoomId = 7, RoomName = "Ph√≤ng x√©t nghi·ªám 501" },
                new Room { RoomId = 8, RoomName = "Ph√≤ng ch·ª•p X-quang 601" }
            );

            await ctx.SaveChangesAsync();
        }

        // üß™ Test 1: GetAllAsync tr·∫£ v·ªÅ t·∫•t c·∫£ ph√≤ng kh√°m
        [Fact]
        public async Task GetAllAsync_Returns_All_8_Rooms()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var all = await repo.GetAllAsync();

            all.Should().HaveCount(8);
            all.Should().OnlyContain(r => r.RoomId > 0 && !string.IsNullOrEmpty(r.RoomName));
        }

        // üß™ Test 2: GetByIdAsync tr·∫£ null khi kh√¥ng t·ªìn t·∫°i; khi t·ªìn t·∫°i th√¨ c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin
        [Fact]
        public async Task GetByIdAsync_Returns_Null_If_NotFound_Else_Room_With_Doctors()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);

            // Seed doctors ƒë·ªÉ test Include
            ctx.Roles.Add(new Role { RoleId = 1, RoleName = "Doctor" });
            ctx.Users.Add(new User { UserId = 1, Phone = "0901", PasswordHash = "x", FullName = "Dr. A", RoleId = 1 });
            ctx.Doctors.Add(new Doctor { DoctorId = 1, UserId = 1, Specialty = "Cardiology", ExperienceYears = 5, RoomId = 1 });

            await ctx.SaveChangesAsync();

            var repo = new RoomRepository(ctx);

            (await repo.GetByIdAsync(999)).Should().BeNull();

            var room1 = await repo.GetByIdAsync(1);
            room1.Should().NotBeNull();
            room1!.RoomId.Should().Be(1);
            room1.RoomName.Should().Be("Ph√≤ng kh√°m t·ªïng qu√°t 101");
            room1.Doctors.Should().NotBeNull();
        }

        // üß™ Test 3: GetPagedAsync ‚Äî ph√¢n trang c∆° b·∫£n
        [Fact]
        public async Task GetPagedAsync_Returns_Paginated_Results()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var (items, total) = await repo.GetPagedAsync(pageNumber: 1, pageSize: 3);

            total.Should().Be(8);
            items.Should().HaveCount(3);
            items.Should().OnlyContain(r => r.RoomId >= 1 && r.RoomId <= 3);
        }

        // üß™ Test 4: GetPagedAsync ‚Äî search term ho·∫°t ƒë·ªông
        [Fact]
        public async Task GetPagedAsync_Filters_By_SearchTerm()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var (items, total) = await repo.GetPagedAsync(pageNumber: 1, pageSize: 10, searchTerm: "tim m·∫°ch");

            total.Should().Be(2); // 2 ph√≤ng tim m·∫°ch
            items.Should().OnlyContain(r => r.RoomName.Contains("tim m·∫°ch"));
        }

        // üß™ Test 5: GetPagedAsync ‚Äî kh√¥ng c√≥ k·∫øt qu·∫£ khi search kh√¥ng t·ªìn t·∫°i
        [Fact]
        public async Task GetPagedAsync_Returns_Empty_When_SearchTerm_NotFound()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var (items, total) = await repo.GetPagedAsync(pageNumber: 1, pageSize: 10, searchTerm: "RoomXYZ");

            total.Should().Be(0);
            items.Should().BeEmpty();
        }

        // üß™ Test 6: AddAsync ‚Äî th√™m ph√≤ng m·ªõi
        [Fact]
        public async Task AddAsync_Creates_New_Room()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var newRoom = new Room { RoomName = "Ph√≤ng m·ªõi 999" };
            await repo.AddAsync(newRoom);

            var saved = await ctx.Rooms.FirstOrDefaultAsync(r => r.RoomName == "Ph√≤ng m·ªõi 999");
            saved.Should().NotBeNull();
            saved!.RoomName.Should().Be("Ph√≤ng m·ªõi 999");
            (await ctx.Rooms.CountAsync()).Should().Be(9);
        }

        // üß™ Test 7: UpdateAsync ‚Äî c·∫≠p nh·∫≠t t√™n ph√≤ng
        [Fact]
        public async Task UpdateAsync_Updates_RoomName()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var room = await ctx.Rooms.FirstAsync(r => r.RoomId == 1);
            room.RoomName = "Ph√≤ng ƒë√£ c·∫≠p nh·∫≠t";
            await repo.UpdateAsync(room);

            var updated = await ctx.Rooms.FindAsync(1);
            updated!.RoomName.Should().Be("Ph√≤ng ƒë√£ c·∫≠p nh·∫≠t");
        }

        // üß™ Test 8: DeleteAsync ‚Äî x√≥a ph√≤ng
        [Fact]
        public async Task DeleteAsync_Removes_Room()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            await repo.DeleteAsync(1);

            var deleted = await ctx.Rooms.FindAsync(1);
            deleted.Should().BeNull();
            (await ctx.Rooms.CountAsync()).Should().Be(7);
        }

        // üß™ Test 9: DeleteAsync ‚Äî kh√¥ng throw khi x√≥a ph√≤ng kh√¥ng t·ªìn t·∫°i
        [Fact]
        public async Task DeleteAsync_Does_Not_Throw_When_Room_Not_Exists()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var act = async () => await repo.DeleteAsync(9999);
            await act.Should().NotThrowAsync();

            (await ctx.Rooms.CountAsync()).Should().Be(8);
        }

        // üß™ Test 10: GetPagedAsync ‚Äî x·ª≠ l√Ω pageNumber/pageSize kh√¥ng h·ª£p l·ªá
        [Theory]
        [InlineData(0, 10)]
        [InlineData(-1, 5)]
        [InlineData(1, 0)]
        [InlineData(1, -5)]
        public async Task GetPagedAsync_Handles_Invalid_Paging(int pageNumber, int pageSize)
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            // Repository kh√¥ng validate paging, ch·ªâ d√πng tr·ª±c ti·∫øp trong LINQ
            // V·ªõi invalid paging c√≥ th·ªÉ tr·∫£ v·ªÅ k·∫øt qu·∫£ kh√¥ng mong mu·ªën nh∆∞ng kh√¥ng crash
            var (items, totalCount) = await repo.GetPagedAsync(pageNumber, pageSize);

            // Ch·ªâ verify r·∫±ng method kh√¥ng throw exception
            items.Should().NotBeNull();
            totalCount.Should().BeGreaterThanOrEqualTo(0);
        }

        // üß™ Test 11: GetAllAsync ‚Äî tr·∫£ v·ªÅ empty list khi ch∆∞a c√≥ d·ªØ li·ªáu
        [Fact]
        public async Task GetAllAsync_Returns_Empty_List_When_No_Data()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            var repo = new RoomRepository(ctx);

            var all = await repo.GetAllAsync();

            all.Should().BeEmpty();
        }

        // üß™ Test 12: GetByIdAsync ‚Äî Include doctors relationship
        [Fact]
        public async Task GetByIdAsync_Includes_Doctors_Relationship()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);

            // T·∫°o Role tr∆∞·ªõc
            var role = new Role { RoleId = 1, RoleName = "Doctor" };
            ctx.Roles.Add(role);
            await ctx.SaveChangesAsync();

            // T·∫°o Users v·ªõi ID kh√°c nhau ƒë·ªÉ tr√°nh conflict
            var user1 = new User { UserId = 1, Phone = "0901", PasswordHash = "x", FullName = "Dr. Test 1", RoleId = 1 };
            var user2 = new User { UserId = 2, Phone = "0902", PasswordHash = "x", FullName = "Dr. Test 2", RoleId = 1 };
            ctx.Users.AddRange(user1, user2);
            await ctx.SaveChangesAsync();

            // T·∫°o Doctors v·ªõi Users ƒë√£ t·ªìn t·∫°i
            var doctor1 = new Doctor { DoctorId = 1, UserId = 1, Specialty = "Cardiology", ExperienceYears = 5, RoomId = 1 };
            var doctor2 = new Doctor { DoctorId = 2, UserId = 2, Specialty = "Neurology", ExperienceYears = 3, RoomId = 1 };
            ctx.Doctors.AddRange(doctor1, doctor2);

            await ctx.SaveChangesAsync();
            var repo = new RoomRepository(ctx);

            var room = await repo.GetByIdAsync(1);

            room.Should().NotBeNull();
            room!.Doctors.Should().HaveCount(2);
        }

        // üß™ Test 13: GetPagedAsync ‚Äî sort by RoomId ascending
        [Fact]
        public async Task GetPagedAsync_Sorts_By_RoomId_Ascending()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var (items, total) = await repo.GetPagedAsync(pageNumber: 1, pageSize: 5);

            items.Should().BeInAscendingOrder(r => r.RoomId);
            items.First().RoomId.Should().Be(1);
        }

        // üß™ Test 14: GetPagedAsync v·ªõi searchTerm c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát
        [Fact]
        public async Task GetPagedAsync_Handles_Special_Characters_In_SearchTerm()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var (items, totalCount) = await repo.GetPagedAsync(1, 10, "!@#$%^&*()");

            items.Should().NotBeNull();
            totalCount.Should().Be(0);
            items.Should().BeEmpty();
        }

        // üß™ Test 15: GetPagedAsync v·ªõi searchTerm r·∫•t d√†i
        [Fact]
        public async Task GetPagedAsync_Handles_Very_Long_SearchTerm()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var longSearchTerm = new string('A', 1000);
            var (items, totalCount) = await repo.GetPagedAsync(1, 10, longSearchTerm);

            items.Should().NotBeNull();
            totalCount.Should().Be(0);
            items.Should().BeEmpty();
        }

        // üß™ Test 16: UpdateAsync v·ªõi room c√≥ Doctors
        [Fact]
        public async Task UpdateAsync_Updates_Room_With_Existing_Doctors()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);

            // T·∫°o Users v·ªõi ID kh√°c nhau ƒë·ªÉ tr√°nh conflict
            var user1 = new User { UserId = 1, Phone = "0901", PasswordHash = "x", FullName = "Dr. Test 1", RoleId = 1 };
            var user2 = new User { UserId = 2, Phone = "0902", PasswordHash = "x", FullName = "Dr. Test 2", RoleId = 1 };
            ctx.Users.AddRange(user1, user2);
            await ctx.SaveChangesAsync();

            // T·∫°o Room v·ªõi Doctors
            var room = new Room { RoomId = 1, RoomName = "Original Room" };
            ctx.Rooms.Add(room);

            var doctor1 = new Doctor { DoctorId = 1, UserId = 1, Specialty = "Cardiology", ExperienceYears = 5, RoomId = 1 };
            var doctor2 = new Doctor { DoctorId = 2, UserId = 2, Specialty = "Neurology", ExperienceYears = 3, RoomId = 1 };
            ctx.Doctors.AddRange(doctor1, doctor2);
            await ctx.SaveChangesAsync();

            var repo = new RoomRepository(ctx);

            // Update room name
            room.RoomName = "Updated Room Name";
            await repo.UpdateAsync(room);

            // Verify update
            var updatedRoom = await ctx.Rooms
                .Include(r => r.Doctors)
                .FirstOrDefaultAsync(r => r.RoomId == 1);

            updatedRoom.Should().NotBeNull();
            updatedRoom!.RoomName.Should().Be("Updated Room Name");
            updatedRoom.Doctors.Should().HaveCount(2);
        }

        // üß™ Test 17: AddAsync throws exception when room name already exists
        [Fact]
        public async Task AddAsync_Throws_When_Room_Name_Already_Exists()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var duplicateRoom = new Room { RoomName = "Ph√≤ng kh√°m t·ªïng qu√°t 101" };

            var exception = await Assert.ThrowsAsync<InvalidOperationException>(
                () => repo.AddAsync(duplicateRoom));

            exception.Message.Should().Be("Room name 'Ph√≤ng kh√°m t·ªïng qu√°t 101' already exists.");
        }

        // üß™ Test 18: AddAsync throws exception when room name already exists (case insensitive)
        [Fact]
        public async Task AddAsync_Throws_When_Room_Name_Already_Exists_Case_Insensitive()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var duplicateRoom = new Room { RoomName = "PH√íNG KH√ÅM T·ªîNG QU√ÅT 101" };

            var exception = await Assert.ThrowsAsync<InvalidOperationException>(
                () => repo.AddAsync(duplicateRoom));

            exception.Message.Should().Be("Room name 'PH√íNG KH√ÅM T·ªîNG QU√ÅT 101' already exists.");
        }

        // üß™ Test 19: UpdateAsync throws exception when room name already exists
        [Fact]
        public async Task UpdateAsync_Throws_When_Room_Name_Already_Exists()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var roomToUpdate = await ctx.Rooms.FirstAsync(r => r.RoomId == 1);
            roomToUpdate.RoomName = "Ph√≤ng tim m·∫°ch 202"; // This name already exists

            var exception = await Assert.ThrowsAsync<InvalidOperationException>(
                () => repo.UpdateAsync(roomToUpdate));

            exception.Message.Should().Be("Room name 'Ph√≤ng tim m·∫°ch 202' already exists.");
        }

        // üß™ Test 20: UpdateAsync allows same room to keep its name
        [Fact]
        public async Task UpdateAsync_Allows_Same_Room_To_Keep_Its_Name()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            var roomToUpdate = await ctx.Rooms.FirstAsync(r => r.RoomId == 1);
            var originalName = roomToUpdate.RoomName;
            roomToUpdate.RoomName = originalName; // Same name

            await repo.UpdateAsync(roomToUpdate);

            var updatedRoom = await ctx.Rooms.FirstAsync(r => r.RoomId == 1);
            updatedRoom.RoomName.Should().Be(originalName);
        }

        // üß™ Test 21: DeleteAsync throws exception when room has doctors
        [Fact]
        public async Task DeleteAsync_Throws_When_Room_Has_Doctors()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);

            // T·∫°o Users v·ªõi ID kh√°c nhau ƒë·ªÉ tr√°nh conflict
            var user1 = new User { UserId = 1, Phone = "0901", PasswordHash = "x", FullName = "Dr. Test 1", RoleId = 1 };
            var user2 = new User { UserId = 2, Phone = "0902", PasswordHash = "x", FullName = "Dr. Test 2", RoleId = 1 };
            ctx.Users.AddRange(user1, user2);
            await ctx.SaveChangesAsync();

            // T·∫°o Room v·ªõi Doctors
            var room = new Room { RoomId = 1, RoomName = "Room with Doctors" };
            ctx.Rooms.Add(room);

            var doctor1 = new Doctor { DoctorId = 1, UserId = 1, Specialty = "Cardiology", ExperienceYears = 5, RoomId = 1 };
            var doctor2 = new Doctor { DoctorId = 2, UserId = 2, Specialty = "Neurology", ExperienceYears = 3, RoomId = 1 };
            ctx.Doctors.AddRange(doctor1, doctor2);
            await ctx.SaveChangesAsync();

            var repo = new RoomRepository(ctx);

            var exception = await Assert.ThrowsAsync<InvalidOperationException>(
                () => repo.DeleteAsync(1));

            exception.Message.Should().Be("Cannot delete room 'Room with Doctors' because it has 2 doctor(s) assigned.");
        }

        // üß™ Test 22: DeleteAsync succeeds when room has no doctors
        [Fact]
        public async Task DeleteAsync_Succeeds_When_Room_Has_No_Doctors()
        {
            var db = Guid.NewGuid().ToString();
            await using var ctx = NewCtx(db);
            await SeedRoomDataAsync(ctx);
            var repo = new RoomRepository(ctx);

            await repo.DeleteAsync(1);

            var deletedRoom = await ctx.Rooms.FirstOrDefaultAsync(r => r.RoomId == 1);
            deletedRoom.Should().BeNull();
        }
    }
}
